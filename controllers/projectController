const Project = require('../models/projectModel')
const mongoose = require('mongoose')

//get all projects
const getProjects = async (req,res) => {
    const projects = await Project.find({}).sort({createdAt: -1})

    res.status(200).json(projects)
}
//get a single project 
const getProject = async (req,res) => {
    const { id } = req.params

    if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(404).json({error: 'No such project'})
    }

    const project = await Project.findById(id)

    if (!project){
        return res.status(404),json({error: 'No such Project'})
    }
    res.status(200).jason(project)

}

//create a new project
const createProject = async (req,res) => {
    const {title, year, duration} = req.body
    // what to show as an error when we keep BOXES empty
    let emptyFields = []
    if (!title){
        emptyFields.push('title')
    }
    if (!year){
        emptyFields.push('year')
    }
    if (!duration){
        emptyFields.push('duration')
    }
    if (emptyFields.length>0){
        return res.status(400).json({error: 'Please fillup all the spaces', emptyFields})
    }
    // add info to database
    try {
        const project = await Project.create({title, year, duration})
        res.status(200).json(project)
    } catch (error) {
        res.status(400).json({error: error.message})
    }
}

//delete a particular project
const deleteProject = async (req, res) => {
    const { id } = req.params

    if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({error: 'No such project'})
    }

    const project = await Project.findOneAndDelete({ _id: id })

    if (!project){
        return res.status(400).json({error: 'No such Project'})
    }

    res.status(200).json(project)
}

//update a particular project
const updateProject = async (req, res) => {
    const { id } = req.params

    if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({error: 'No such project'})
    }
    
    const project = await Project.findOneAndUpdate({_id: id}, {
        ...req.body
    })

    if (!project){
        return res.status(400),json({error: 'No such Project'})
    }

    res.status(200).json(project)

}




module.exports = {
    getProjects,
    getProject,
    createProject,
    deleteProject,
    updateProject
}